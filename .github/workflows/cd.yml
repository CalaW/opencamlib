name: CD

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  build:
    name: CD ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os_arch: [
          windows-x64,
          windows-ia32,
          macos-arm64,
          macos-x86_64,
          ubuntu-x64,
          ubuntu-arm64,
          ubuntu-arm
        ]
        include:
          - os_arch: windows-x64
            os: windows-2022
            osname: windows
            arch: x64
            python_executable: C:/hostedtoolcache/windows/Python/3.10.8/x64/python3.exe
            python_prefix: C:/hostedtoolcache/windows/Python/3.10.8/x64
            boost_from_source: "1"
            address_model: "64"
          - os_arch: windows-ia32
            os: windows-2022
            osname: windows
            arch: ia32
            python_executable: C:/hostedtoolcache/windows/Python/3.10.8/x64/python3.exe
            python_prefix: C:/hostedtoolcache/windows/Python/3.10.8/x64
            boost_from_source: "1"
            address_model: "32"
          - os_arch: macos-arm64
            os: macos-11.0
            osname: macos
            arch: arm64
            boost_architecture: arm
            python_executable: /usr/local/opt/python@3.10/bin/python3
            python_prefix: /usr/local/opt/python@3.10
            boost_from_source: "1"
            address_model: "32_64"
          - os_arch: macos-x86_64
            os: macos-11.0
            osname: macos
            arch: x86_64
            boost_architecture: x86
            python_executable: /usr/local/opt/python@3.10/bin/python3
            python_prefix: /usr/local/opt/python@3.10
            boost_from_source: "1"
            address_model: "32_64"
          - os_arch: ubuntu-x64
            os: ubuntu-22.04
            osname: ubuntu
            arch: x64
            address_model: "64"
          - os_arch: ubuntu-arm64
            os: ubuntu-22.04
            osname: ubuntu
            arch: arm64
            docker-arch: linux/arm64
            docker-image: node:19.1.0-bullseye-slim
            address_model: "64"
          - os_arch: ubuntu-arm
            os: ubuntu-22.04
            osname: ubuntu
            arch: arm
            docker-arch: linux/arm/v7
            docker-image: node:19.1.0-bullseye-slim
            address_model: "32"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build
        shell: bash
        if: ${{ !matrix.docker-arch }}
        run: |
          export OCL_BOOST_ARCHITECTURE="${{ matrix.boost_architecture }}"
          export OCL_PYTHON_EXECUTABLE="${{ matrix.python_executable }}"
          export OCL_PYTHON_PREFIX="${{ matrix.python_prefix }}"
          export OCL_ADDRESS_MODEL="${{ matrix.address_model }}"
          ./scripts/install-${{ matrix.osname }}.sh nodejslib release
          export OCL_BOOST_FROM_SOURCE="${{ matrix.boost_from_source }}"
          if [ "${{ matrix.osname }}" == "macos" ]; then
            export CMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}"
            export OCL_OPENMP_MULTI_ARCH="1"
          fi
          ./scripts/install-${{ matrix.osname }}.sh python3lib release
          if [ "${{ matrix.osname }}" == "macos" ]; then
            export OPENMP_PREFIX_MACOS=$(find /tmp/libomp-${{ matrix.arch }}/libomp -depth 1)
          fi
          export OCL_INSTALL_PREFIX="$(pwd)/dist/cxxlib"
          ./scripts/build-${{ matrix.osname }}.sh cxxlib release
          export OCL_INSTALL_PREFIX="$(pwd)/dist/nodejslib"
          ./scripts/build-${{ matrix.osname }}.sh nodejslib release
          export OCL_INSTALL_PREFIX="$(pwd)/dist/python3lib"
          ./scripts/build-${{ matrix.osname }}.sh python3lib release
          if [ "${{ matrix.os_arch }}" = "ubuntu-x64" ]; then
            export OCL_BOOST_FROM_SOURCE="1"
            ./scripts/install-ubuntu.sh emscriptenlib release
            export OCL_INSTALL_PREFIX="$(pwd)/dist/emscriptenlib"
            ./scripts/build-ubuntu.sh emscriptenlib release
          fi
          find .
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: matrix.docker-arch
      - name: Build in Docker
        uses: addnab/docker-run-action@v3
        if: matrix.docker-arch
        with:
          image: ${{ matrix.docker-image }}
          options: --platform=${{ matrix.docker-arch }} -v ${{ github.workspace }}:/work -e OSNAME=${{ matrix.osname }} -e OCL_ADDRESS_MODEL=${{ matrix.address_model }}
          run: |
            apt-get update
            apt-get install -y git cmake build-essential libboost-dev libboost-python-dev
            cd /work
            export OCL_NO_DEPS="1"
            ./scripts/install-${OSNAME}.sh nodejslib release
            ./scripts/install-${OSNAME}.sh python3lib release
            export OCL_INSTALL_PREFIX="$(pwd)/dist/cxxlib"
            ./scripts/build-${OSNAME}.sh cxxlib release
            export OCL_INSTALL_PREFIX="$(pwd)/dist/nodejslib"
            ./scripts/build-${OSNAME}.sh nodejslib release
            export OCL_INSTALL_PREFIX="$(pwd)/dist/python3lib"
            ./scripts/build-${OSNAME}.sh python3lib release
            find .
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os_arch }}
          if-no-files-found: ignore
          path: |
            dist/python3lib
            dist/cxxlib
            dist/emscriptenlib
            dist/nodejslib
  bundle:
    name: Bundle Libraries
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: tmp
      - name: Display structure of downloaded files
        run: |
          mkdir prebuilds
          mv tmp/* prebuilds/
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libraries
          path: prebuilds
          retention-days: 7